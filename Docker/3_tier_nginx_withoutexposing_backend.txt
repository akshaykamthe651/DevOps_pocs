
sudo apt-get update
sudo apt install docker.io -y 
docker --version 

//on DB-MASTER  
	sudo docker swarm init

// ON WORKER NODE 1 & 2 
		
	docker swarm join --token SWMTKN-1-65mpdlvz77eed51uvgwb18rp1yt3d30m3wxrzz0gbc6uz7745q-1td5sp20mb9ft0kxh0j3ifra2 172.31.11.36:2377

//on DB-MASTER 
	//Check if the worker nodes are connected
	sudo docker node ls
	
	//create overlay network to attch backend & database
	sudo docker network create --driver=overlay --attachable mynetwork1
	
	sudo docker run  -dp 3306:3306 --name employeedb --network mynetwork1 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=employeedb mysql:5.7
	
// ON WORKERNODE -1 (spring app in src)
		//clone code 
			git clone https://github.com/akshaykamthe651/Demo.git
		
		//add Dockerfile
		
	#stage1
        FROM  maven:3.6-alpine as builder

        COPY springboot-backend /springboot-backend

        WORKDIR /springboot-backend

        RUN mvn clean install -DskipTests
     #stage2
        FROM openjdk:8-alpine

        COPY --from=builder /springboot-backend/target/app.jar /app.jar

        EXPOSE 8080

        ENTRYPOINT ["java","-jar","app.jar"] 
		
	//COMMENT THE PORT HOST USER PASSWORD AS SHOWN BELOW
	
	sudo nano src/main/java/com/example/demo/SpringbootBackendApplication.java
	
	//edit file
		sudo nano src/main/java/com/example/demo/controller/EmployeeController.java
		
		@CrossOrigin(origins = "*")
	
	//Remove port & change databasename-employeedb 
		sudo nano src/main/resources/application.properties
		
    //build & run dockerfile in workernode-1
	sudo docker build -t employeeapp:v01 .
	
	
	 sudo docker network ls (mynetwork1)
	 sudo docker run -d --name employeeapp --network mynetwork1  -e host=employeedb -e mysql_user=root -e mysql_password=root employeeapp:v01
	
	 expected :   2e062f69b90057dc25d1a12460a2143070da6f9b6d4f5eb2171650e163875337

	// go to DB-MASTER run create another network
		sudo docker network create --driver=overlay --attachable mynetwork2
		sudo docker node ls
		expected : st9vc4t0phbm5y6kgk7zebtd7
		
	//CHECK IF THE CONTAINER LAUNCHED IS RUNNING
		sudo docker ps -a
		
		
	//ON BACKEND HOST ( HOST2 ) 
		sudo docker network connect mynetwork2 employeeapp
		
////////////////////now go to frontend workernode-2 /////////////////
		
		//clone repo 
			git clone https://github.com/akshaykamthe651/Demo.git
			
		//go to app create default.conf file
		
		sudo nano default.conf
		
		server {
		listen 80;
		server_name localhost;
		#charset koi8-r;
		#access_log /var/log/nginx/host.access.log main;
		location / {
		root /usr/share/nginx/html;
		index index.html index.htm;
		}
		location /api {
		proxy_pass http://employeeapp:8080/api/v1/employees;
		}
		#error_page 404 /404.html;
		# redirect server error pages to the static page /50x.html
		error_page 500 502 503 504 /50x.html;
		location = /50x.html {
		root /usr/share/nginx/html;
		}
		}
		
//go to src/app/employee.service.ts file edit base url
	sudo nano src/app/employee.service.ts
	
	private baseURL="api";

//edit Dockerfile

FROM node:10-alpine as build-step
RUN mkdir -p /app1
WORKDIR /app1
COPY package.json /app1
RUN npm install
COPY . /app1
RUN npm run build --prod
# Stage 2
FROM nginx:1.17.1-alpine
COPY --from=build-step /app1/dist/app /usr/share/nginx/html
RUN rm -rf /etc/nginx/conf.d/default.conf
COPY default.conf /etc/nginx/conf.d/


	//BUILD THE IMAGE
	sudo docker build -t employeeweb:v01 .


	//RUN THE CONTAINER FROM IMAGE
	sudo docker run -d -it -p 80:80/tcp --name employeeweb --network mynetwork2 employeeweb:v01
	
	//CHECK IF THE CONTAINER IS RUNNING
	sudo docker ps -a 
	
	//to check container logs
		sudo docker logs containerID
		
//check front end node ip addres & hit -> this will start application .

///check backend ec2 ip and check it will show access denied	



	
