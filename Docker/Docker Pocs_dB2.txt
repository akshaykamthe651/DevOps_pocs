
-> play with docker (https://labs.play-with-docker.com/)


1.What is difference between virtulization and dockerization

	Virtualization enables you to run multiple operating systems on the hardware of a single physical server, 
	while containerization enables you to deploy multiple applications using the same operating system on a single virtual machine or server. 
	
	The simple difference is that Docker containers share the OS Kernel and bypass the extra Operating layer of the Hypervisor. 
	In Vmware the VMs will not share the OS Kernel and spin as standalone instances of OS on the Hypervisor.
	
	
2.LXC , Namespace and Cgroups

	LXC (LinuX Containers) is a OS-level virtualization technology that allows creation and running of multiple isolated Linux virtual environments (VE) on a single control host. ... 
	This it achieves using a high-level API that provides a lightweight virtualization solution to run processes in isolation

	A namespace is a declarative region that provides a scope to the identifiers (the names of types, functions, variables, etc) inside it. 
	Namespaces are used to organize code into logical groups and to prevent name collisions that can occur especially when your code base includes
	multiple libraries.
	
	cgroups limits the resources which a process or set of processes can use these resources could be CPU,Memory,Network I/O or access to filesystem 
	while namespace restrict the visibility of group of processes to the rest of the system
	
3.Study cmd vs entrypoint
	CMD sets default command and/or parameters, which can be overwritten from command line when docker container runs.
	e.g.
	CMD ["echo", "Hello Docker"]
	
	$ sudo docker run <image-id>
	Hello Docker
	$ sudo docker run <image-id> hostname   # hostname is exec to override CMD
	244be5006f32
	
	
   ENTRYPOINT command and parameters will not be overwritten from command line. Instead, all command line arguments will be added after ENTRYPOINT parameters.

	e.g.
	ENTRYPOINT ["echo", "Hello Docker"]
	
	$ sudo docker run <image-id>
	Hello Docker
	$ sudo docker run <image-id> hostname   # hostname is exec to override CMD
	Hello Docker 244be5006f32
	
4.Study difference between add and copy

		COPY takes in a src and destination. It only lets you copy in a local file or directory from your host (the machine building the Docker image) 
		into the Docker image itself.
		
		ADD lets you do that too, but it also supports 2 other sources. First, you can use a URL instead of a local file / directory. 
		Secondly, you can extract a tar file from the source directly into the destination

5.Study port mapping in docker
		In Docker, the containers themselves can have applications running on ports. When you run a container, if you want to access the 
		application in the container via a port number,you need to map the port number of the container to the port number of the Docker host
		
		e.g docker run -d -p 8000:80 nginx
		
		
6.Study docker networking
		
		Docker’s networking subsystem is pluggable, using drivers. Several drivers exist by default, and provide core networking functionality:
			6.1.bridge: The default network driver. If you don’t specify a driver, this is the type of network you are creating.
			Bridge networks are usually used when your applications run in standalone containers that need to communicate. See bridge networks.

			6.2 host: For standalone containers, remove network isolation between the container and the Docker host, and use the host’s networking directly.
			See use the host network.
			
			6.3 overlay: Overlay networks connect multiple Docker daemons together and enable swarm services to communicate with each other. 
			You can also use overlay networks to facilitate communication between a swarm service and a standalone container, or between two standalone containers 
			on different Docker daemons. This strategy removes the need to do OS-level routing between these containers. See overlay networks.
			
			6.4 macvlan: Macvlan networks allow you to assign a MAC address to a container, making it appear as a physical device on your network. 
			The Docker daemon routes traffic to containers by their MAC addresses. Using the macvlan driver is sometimes the best choice when dealing
			with legacy applications that expect to be directly connected to the physical network, rather than routed through the Docker host’s network stack.
			
			none: For this container, disable all networking. Usually used in conjunction with a custom network driver. none is not available for swarm services.
			See disable container networking.
			
			Network plugins: You can install and use third-party network plugins with Docker. These plugins are available from Docker Hub or
			from third-party vendors. See the vendor’s documentation for installing and using a given network plugin.

7. Docker layering
		
		-The major difference between a container and an image is the top writable layer. All writes to the container that add new or modify existing data
		are stored in this writable layer. When the container is deleted, the writable layer is also deleted. The underlying image remains unchanged.
		Because each container has its own writable container layer, and all changes are stored in this container layer, multiple containers can share
		access to the same underlying image and yet have their own data state.
		-Docker uses storage drivers to manage the contents of the image layers and the writable container layer. Each storage driver handles the implementation 
		differently, but all drivers use stackable image layers and the copy-on-write (CoW) strategy.
		
8.Study docker architecture
		
		
		Docker uses a client-server architecture. The Docker client talks to the Docker daemon, which does the heavy lifting of building, running,
		and distributing your Docker containers. The Docker client and daemon can run on the same system, or you can connect a Docker client to a 
		remote Docker daemon. The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface.
		Another Docker client is Docker Compose, that lets you work with applications consisting of a set of containers.
			8.1 ->The Docker daemon
				The Docker daemon (dockerd) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. 
				A daemon can also communicate with other daemons to manage Docker services.

			8.2->The Docker client
				The Docker client (docker) is the primary way that many Docker users interact with Docker. When you use commands such as docker run,
				the client sends these commands to dockerd, which carries them out. The docker command uses the Docker API.
				The Docker client can communicate with more than one daemon.

			8.3->Docker registries
				A Docker registry stores Docker images. Docker Hub is a public registry that anyone can use, and Docker is configured to look for images
				on Docker Hub by default. You can even run your own private registry. When you use the docker pull or docker run commands, the required 
				images are pulled from your configured registry. When you use the docker push command, your image is pushed to your configured registry.

			8.4->Docker objects
				When you use Docker, you are creating and using images, containers, networks, volumes, plugins, and other objects. This section is
				a brief overview of some of those objects.

			8.5->Images
				An image is a read-only template with instructions for creating a Docker container. Often, an image is based on another image, 
				with some additional customization. For example, you may build an image which is based on the ubuntu image, but installs the Apache 
				web server and your application, as well as the configuration details needed to make your application run.
				You might create your own images or you might only use those created by others and published in a registry. To build your own image, 
				you create a Dockerfile with a simple syntax for defining the steps needed to create the image and run it. Each instruction in a
				Dockerfile creates a layer in the image. When you change the Dockerfile and rebuild the image, only those layers which have changed are rebuilt.
				This is part of what makes images so lightweight, small, and fast, when compared to other virtualization technologies.

			8.6->iners
				A container is a runnable instance of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI. 
				You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.
				By default, a container is relatively well isolated from other containers and its host machine. You can control how isolated a container’s
				network, storage, or other underlying subsystems are from other containers or from the host machine.
				A container is defined by its image as well as any configuration options you provide to it when you create or start it.
				When a container is removed, any changes to its state that are not stored in persistent storage disappear.

			8.7->Example docker run command
				The following command runs an ubuntu container, attaches interactively to your local command-line session, and runs /bin/bash.

				$ docker run -i -t ubuntu /bin/bash

9.Docker volume(when to use volume mount vs bind mount) 
			Volumes are the preferred mechanism for persisting data generated by and used by Docker containers. While bind mounts are dependent on
			the directory structure and OS of the host machine,volumes are completely managed by Docker. Volumes have several advantages over bind mounts:
			Volumes are easier to back up or migrate than bind mounts.
				You can manage volumes using Docker CLI commands or the Docker API.
				Volumes work on both Linux and Windows containers.
				Volumes can be more safely shared among multiple containers.
				Volume drivers let you store volumes on remote hosts or cloud providers, to encrypt the contents of volumes, or to add other functionality.
				New volumes can have their content pre-populated by a container.
				Volumes on Docker Desktop have much higher performance than bind mounts from Mac and Windows hosts.
				
			-v or --volume: Consists of three fields, separated by colon characters (:).
				The fields must be in the correct order, and the meaning of each field is not immediately obvious.	
			--mount: Consists of multiple key-value pairs, separated by commas and each consisting of a <key>=<value> tuple.
				The --mount syntax is more verbose than -v or --volume, but the order of the keys is not significant, and the value of the flag is easier to understand.

			you can create and manage volumes outside the scope of any container.
				$ docker volume create my-vol
				$ docker volume ls
				$ docker volume inspect my-vol
				$ docker volume rm my-vol
			
	9.1->Start a container with a volume
	
			9.1.1 --mount
				$ docker run -d \ --name devtest \ --mount source=myvol2,target=/app \ nginx:latest
			
			9.1.2 -v 
				$ docker run -d \ --name devtest \  -v myvol2:/app \  nginx:latest
	
	9.2-> Stop the container and remove the volume. Note volume removal is a separate step.
			
			$ docker container stop devtest

			$ docker container rm devtest

			$ docker volume rm myvol2
			
	9.3-> A Docker data volume persists after a container is deleted. There are two types of volumes to consider:

         9.3.1->Named volumes have a specific source from outside the container.
			9.3.2->Anonymous volumes have no specific source so when the container is deleted, instruct the Docker Engine daemon to remove them.		
	
	9.4-> To remove all unused volumes and free up space:
			$ docker volume prune

 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Install Docker 
on ubuntu:
		
		sudo apt update
		sudo apt install apt-transport-https ca-certificates curl software-properties-common
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
		sudo apt update
		apt-cache policy docker-ce
		sudo apt install docker-ce
		sudo systemctl status docker
		sudo adduser akshay
		sudo usermod -aG docker akshay
		sudo su akshay
		mkdir /home/akshay/pocs
		sudo chmod -R a+rwx /home/akshay/pocs or usermod -g 0 -o akshay
		
		docker --version 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

1.Write a docker file for Java, NodeJS, AngularJs,Python

	JAVA:
	----
		1.Create Java application
		2.Create Dockerfile
		
			#Add base image
					FROM openjdk:8
					COPY . /var/www/java
					WORKDIR /var/www/java


					RUN ["javac", "Helloworld.java"]
					ENTRYPOINT ["java","Helloworld"]
					
					********
					FROM openjdk:8
					COPY . /var/www/java
					WORKDIR /var/www/java


					RUN ["javac", "Helloworld.java"]
					CMD ["java","Helloworld"]
					
					
		3.buld docker image
			docker build -t my-java-app .	
			
		4.run docker image
			docker run my-java-app


		5.push into doker hub
		docker tag  93998bb05b2c  akshaykamthe651/two_tierjava_app:two_tier-java-app		
		docker login
		docker push akshaykamthe651/two_tierjava_app:two_tier-java-app		
	
	NodeJs:
	------
		https://nodejs.org/en/docs/guides/nodejs-docker-webapp/
		
		FROM node:14

		# Create app directory
		WORKDIR /usr/src/app

		# Install app dependencies
		# A wildcard is used to ensure both package.json AND package-lock.json are copied
		# where available (npm@5+)
		COPY package*.json ./

		RUN npm install
		# If you are building your code for production
		# RUN npm ci --only=production

		# Bundle app source
		COPY . .

		EXPOSE 8080
		
		
	AngularJs:
	----------
			sudo apt update
			sudo  apt install docker.io
			sudo adduser akshay
			sudo usermod -a -G docker akshay
			 
			
			curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
			sudo apt install nodejs
			sudo apt-get install -y nodejs

			node --version
			npm --version
			sudo chmod -R a+rwx	/usr/lib/node_modules
			
			sudo npm install -g @angular/cli --force (run as root user)
			
			ng --version
			---------------
			mkdir /home/akshay/pocs
			sudo chmod -R a+rwx /home/akshay/pocs
			
			
			
	
			1.create angularjs application
						sudo su akshay
						cd /home/akshay/pocs
										   >ng new applicationname
										   >npm start
										   >ng serve --open
			2.create dockerfile

					#Stage 1-build

					FROM node:12.7-alpine AS build

					#define our current path inside of the container
					WORKDIR /usr/src/app

					#copying two files to our work directory 
					COPY package.json package-lock.json ./

					#force cleaning the cache of node otherwise it can throw an error of core-js being outdated and installing the node packages from the package.json
					RUN npm cache clean --force
					RUN npm i

					#again copying the files into the image
					COPY . .

					#build our angular application
					RUN npm run build



					### STAGE 2: Run ###
					FROM nginx:1.17.1-alpine
					#copy the dist-output from our first image (called build, remember?) to our new image. Precisely into the NGINX public folder.
					COPY --from=build /usr/src/app/dist/Angular-docker /usr/share/nginx/html
					
			3.Build docker 
				docker build -t dockerized-angular-app-multistage-image .  
					-(“.”) defines the location of the Dockerfile.
			

				
			4.Run/execute the docker
				docker run --name dockerized-angular-app-multistage-image -d -p 8080:80 dockerized-angular-app-multistage-image
				
				
			5. Run IP address :8080 port	
----------------------------------------------------------------------------------------------------------------------------------------------			

2. Link mysql container with backend container

		
								2.1)Run in the ubuntu       
                                                  sudo apt-get update
                                                  sudo apt install openjdk-11-jdk
                                                  javac -version
                                                  sudo apt-get install maven -y
												  
                                2.2)run mysql container
                                    
									sudo apt install docker.io

									sudo docker network create devnet
									sudo docker network ls
                                    sudo docker run -dp 3306:3306 --name mysql --network devnet -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=employeedb mysql:5.7
									
									 
                                    sudo docker exec -it <containerID> /bin/bash
                                    mysql -u root -p
									
									//check database
									show databases;
									use databases;
									show tables;
								
									
									exit
									exit
									
                                    sudo docker inspect <container ID)  
                                    copy the IP address						// 172.18.0.2"
                                    
								
                                                                
                                2.3)Go to the spring boot application     (source -> https://github.com/Ashlesh12342/ashlesh.git )
								
										sudo adduser akshay
										sudo usermod -a -G docker akshay
										sudo mkdir /home/akshay/pocs
										sudo chmod -R a+rwx /home/akshay/pocs
										sudo su akshay
										cd /home/akshay/pocs
										git clone https://github.com/Ashlesh12342/ashlesh.git
										
                                     //remove the port from application.properties file & database name employeedb
 										cd ashlesh/springboot-backend/src/main/resources 
										
                                     //go to SpringbootBackendApplication.java file comment 4 lines
                                          cd springboot-backend/src/main/java/com/example/demo
										  cat SpringbootBackendApplication.java
										  
                                2.4)go to root directory      (run as akshay user)
                                        mvn clean install -DskipTests 
                                        
									//	java  -DskipTests -Dhost=172.18.0.2  -Dmysql_user=root -Dmysql_password=root -jar target/app.jar
                                                
                                        sudo  docker build -t springapp .
                                        sudo docker run -it --name springapp --network devnet -p 8080:8080 -e host=mysql -e mysql_user=root -e mysql_password=root <sprisngapp image id>
										 
										  
								2.5)go to browser copy the instance IP:8080/api/v1/employees
                                                
                                                
										docker tag    deepikab97/docker_pocs21:my-spring-app
										docker push deepikab97/docker_pocs21:my-spring-app
                                                
									//optional to add ddata in database	
										sudo docker exec -it <containerID> /bin/bash
                                        mysql -uroot -p
                                        INSERT INTO employees VALUES (1,"deepika@gmail.com","Deepika","Battewar"),(2,"akshay@gmail.com","Akshay","Kamthe");
										select * from employees;
								 
											
											
											
								
										
										
	
		
----------------------------------------------------------------------------------------------------------------------------------------------

3. Deploy 3 tier application in docker container expose frontend to internet on same machine
			 
		sudo apt-get update
		sudo apt install docker.io -y 
		docker --version 

	//create 1 bridge network 
	sudo docker network create devnet
	
	sudo docker run  -dp 3306:3306 --name employeedb --network devnet -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=employeedb mysql:5.7
	
		//clone code 
			git clone https://github.com/laxapatiakshaylearning/ashlesh
		
		//add Dockerfile
		
	#stage1
        FROM  maven:3.6-alpine as builder

        COPY springboot-backend /springboot-backend

        WORKDIR /springboot-backend

        RUN mvn clean install -DskipTests
     #stage2
        FROM openjdk:8-alpine

        COPY --from=builder /springboot-backend/target/app.jar /app.jar

        EXPOSE 8080

        ENTRYPOINT ["java","-jar","app.jar"] 
		
	//COMMENT THE PORT HOST USER PASSWORD AS SHOWN BELOW
	
	sudo nano src/main/java/com/example/demo/SpringbootBackendApplication.java
	
	//edit file
		sudo nano src/main/java/com/example/demo/controller/EmployeeController.java
		
		@CrossOrigin(origins = "*")
	
	//Remove port & change databasename-employeedb 
		sudo nano src/main/resources/application.properties
		
    //build & run dockerfile 
	sudo docker build -t employeeapp:v01 .
		
	 sudo docker network ls (mynetwork1)
   
	 sudo docker run -d --name employeeapp --network devnet  -e host=employeedb -e mysql_user=root -e mysql_password=root employeeapp:v01
	
	 expected :   2e062f69b90057dc25d1a12460a2143070da6f9b6d4f5eb2171650e163875337
		
	//CHECK IF THE CONTAINER LAUNCHED IS RUNNING
		sudo docker ps -a
			
////////////////////now go to frontend workernode-2 /////////////////
				
		//go to app create default.conf file
		
		server {
		listen 80;
		server_name localhost;
		#charset koi8-r;
		#access_log /var/log/nginx/host.access.log main;
		location / {
		root /usr/share/nginx/html;
		index index.html index.htm;
		}
		location /api {
		proxy_pass http://customerapp:8080/api/v1/employees;
		}
		#error_page 404 /404.html;
		# redirect server error pages to the static page /50x.html
		error_page 500 502 503 504 /50x.html;
		location = /50x.html {
		root /usr/share/nginx/html;
		}
		}
		
//go to src/app/employee.service.ts file edit base url
	sudo nano src/app/employee.service.ts
	
	private baseURL="api";

//edit Dockerfile

FROM node:10-alpine as build-step
RUN mkdir -p /app1
WORKDIR /app1
COPY package.json /app1
RUN npm install
COPY . /app1
RUN npm run build --prod
# Stage 2
FROM nginx:1.17.1-alpine
COPY --from=build-step /app1/dist/app /usr/share/nginx/html
RUN rm -rf /etc/nginx/conf.d/default.conf
COPY default.conf /etc/nginx/conf.d/


	//BUILD THE IMAGE
	sudo docker build -t employeeweb:v01 .


	//RUN THE CONTAINER FROM IMAGE
	sudo docker run -d -it -p 80:80/tcp --name employeeweb --network devnet employeeweb:v01
	
	//CHECK IF THE CONTAINER IS RUNNING
	sudo docker ps -a 
	
	//to check container logs
		sudo docker logs containerID
		
//check front end node ip addres & hit -> this will start application .
ec2ip.80

///check backend ec2 ip and check it will show access denied	
ec2Ip:8080/api/v1/employees

//tag & push image to docker hub
	
	sudo docker login
	 sudo docker tag <8cf625070931-imageid> akshaykamthe651/three-tierapp-mysqlspringappangular:mysqlv01
	 sudo docker push akshaykamthe651/three-tierapp-mysqlspringappangular:mysqlv01
	


---------------------------------------------------------------------------------------------------------------------------------
		
4. Volume mount- Delete myql container and create new with previous data (referance -> https://hub.docker.com/_/mysql)

		4.1 pull mysql image & create directory on machine  /home/akshay/pocs  to store  container data from  var/lib/mysql
					
							sudo apt install docker.io -y 
										sudo adduser akshay
										sudo usermod -a -G docker akshay
										sudo mkdir /home/akshay/pocs
										sudo chmod -R a+rwx /home/akshay/pocs
		
		sudo docker run -dp 3306:3306 --name mysql -v /home/akshay/pocs:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=employeedb mysql:5.7
		
		4.2 run image in interactve mode -create database,table,insert record
		
			sudo docker exec -it <containerID> /bin/bash	

			mysql -u root -p       //enter password - root
					show databases;
					use employee_db;
					
					CREATE TABLE employee (id int(255),name varchar(255));

					INSERT INTO table_name VALUES (value1, value2, value3, ...);
					INSERT INTO employee VALUES (1,"Akshay");
					INSERT INTO employee VALUES (2,"Ashish");
					
					SELECT * FROM employee;
				 commit;
				 
					exit
					exit
		4.3 remove container  
			
			sudo docker rm -f <container ID>
				docker ps -a
		4.4 create new mysql container & specify same location also check data from table will show same data 

				sudo docker run -dp 3306:3306 --name mysql -v /home/akshay/pocs:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=employee_db mysql:5.7
				
				sudo docker exec -it <containerID> /bin/bash	

					mysql -u root -p       //enter password - root
					show databases;
					use employee_db;
					
					SELECT * FROM employee;
--------------------------------------------------------------------------------------------------------------------------------

5.Connect Docker cli to Docker Daemon installed on different machine (refer -  https://www.youtube.com/watch?v=cjm_NqteLLA )
	    
		
		-------------updated -------------------
		 How to install docker daemon and docker cli in defferent servers

					===============================================
					common steps for docker daemon and docker CLI
					===============================================

					1)   First, update your existing list of packages:
					   
						  $  sudo apt update

					2)   Next, install a few prerequisite packages which let apt use packages over HTTPS:


						  $  sudo apt install apt-transport-https ca-certificates curl software-properties-common -y

					3)   Then add the GPG key for the official Docker repository to your system:


						  $  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

					4) Add the Docker repository to APT sources:


						$  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"

					5)  Next, update the package database with the Docker packages from the newly added repo:

						 $	sudo usermod -a -G docker ubuntu 
						 $   sudo systemctl restart docker
						 $   sudo apt update


						//*  common steps for cli and daemon over* //
					
				
				---------------------------------------------------
					in docker daemon server execute below steps
				---------------------------------------------------
					
					Make sure you are about to install from the Docker repo instead of the default Ubuntu repo:


						$    apt-cache policy docker-ce

					Finally, install Docker:


						 $   sudo apt install docker-ce


					1)  Create the directory to store the configuration file.


						   $    sudo mkdir -p /etc/systemd/system/docker.service.d

					2)   Create a new file to store the daemon options.


							$     sudo vi /etc/systemd/system/docker.service.d/options.conf
							$	  sudo cat /etc/systemd/system/docker.service.d/options.conf


					3)   Now make it look like this and save the file when you’re done: 
					  
						   $ [Service]
							 ExecStart=
							 ExecStart=/usr/bin/dockerd -H unix:// -H=tcp://0.0.0.0:2375


					4)   Now, reload the systemd daemon and restart the docker service:
								 
						   $     sudo systemctl daemon-reload

					5)   # Restart Docker.

						   sudo systemctl restart docker

					That’s going to let you continue to connect to the Docker daemon from within the VM thanks to
					 -H unix://, but it also exposes the Docker Daemon with -H tcp://0.0.0.0:2375 so that anyone 
					can connect to it over the non-encrypted port.

					=======================================
					  execute below steps in docker cli
					=======================================
						#install docker -ce-cli

						sudo apt install docker-ce-cli
				
					Configuring your dev box to connect to the remote Docker daemon:

						1) export DOCKER_HOST=tcp://docker daemon IP:2375
							echo $DOCKER_HOST
							docker ps         //it will show daemon running containers expected output  
							
						//you can also change /lib/systemd/system/docker.service
						
								ExecStart=/usr/bin/dockerd -H unix:// -H tcp://0.0.0.0:2375
								
					If you want to set DOCKER_HOST by default so it always connects remotely 
					you can export it in your ~/.bashrc file. Here’s an example of that as a 1 liner:
				
					# $ echo "export DOCKER_HOST=tcp://docker daemon IP:2375" >> /.bashrc && source /.bashrc

					That just adds the export line to your .bashrc file so it’s available every time you open your terminal. 
					The source command reloads your bash configuration so it takes effect now
					testing the connectivity b/w docker daemon and cli which are there in different servers
					========================================================================================
					2)  $    curl <docker daemon ip>:2375/v1.38/containers/json 
					

---------------------------------------------------------------------------------------------		

6. How to override CMD command  (https://www.youtube.com/watch?v=SdfIQBqQ5t4)
			what basically CMD commnd do , it changes arguments values which are given in dockerfile
				while running that builded image.
				ENTRYPOINT -  we cannot override entrypoint given in dockerfile
			
			#Add base image
					FROM openjdk:8
					COPY . /var/www/java
					WORKDIR /var/www/java

					CMD ["ls"]   // this will list all files
					CMD["Helloworld.java"]  // this will display content of file
					RUN ["javac", "Helloworld.java"]
					CMD ["java","Helloworld"]
					
		 //build image 
			docker build -t imagename .
			
		 // run image & pass or change  parameters during  execution
			docker run  --name imagename imageid ls   hostname
			docker run  --name imagename imageid ls   pwd
			docker run  --name imagename imageid ls   echo javaapp                // ls is command passed
			docker run  --name imagename imageid sleep 5					// sleep command fired sleep for 5 sec 
------------------------------------------------------------------------------------------------------									
				
7. Tag docker image and push it to dockerhub(private repo)
		
		docker tag local-image:tagname new-repo:tagname
		docker push new-repo:tagname
		
		ex. 
			sudo docker tag springapp akshaykamthe651/three-tierapp-angular-spring-mysql:springapp.v1
			docker login
			docker push akshaykamthe651/three-tierapp-angular-spring-mysql:springapp.v1
		
-----------------------------------------------------------------------------------------------------		
		
8. Write Multistage docker file (referance : github.com/nehashirsat/HelloWorld ) (referance2 : https://github.com/TechPrimers/multi-stage-example/blob/master/Dockerfile)
	
	multistage docker file is written to reduce overall size of image
	
	8.1.Create Dockerfile  (run as another user akshay)
			#Add base image
                                        FROM openjdk:alpine AS builder
                                        COPY . /var/www/java
                                        WORKDIR /var/www/java

                                        RUN ["javac", "Helloworld.java"]
                                        ENTRYPOINT ["java","Helloworld"]

                                        FROM alpine:latest
                                        WORKDIR /root
                                        COPY --from=builder /var/www/java .
                                        CMD ["./Helloworld.java"]
	8.2. Create Helloworld.java 
						public class Helloworld {

			public static void main(String[] args) {
				// TODO Auto-generated method stub
			System.out.println("hello");
	  }

    }
	
	8.3.   sudo docker build -t multstage-dockcerfile .
	 sudo docker images (check image size)
	
--------------------------------------------------------------------------------------------			
			
9. Set env variable using dockerfile as well as command line



10. Deploy 3 tier application in docker container expose frontend to internet on different machine


		
sudo apt-get update
sudo apt install docker.io -y 
docker --version 

//on DB-MASTER  
	sudo docker swarm init

// ON WORKER NODE 1 & 2 
		
	docker swarm join --token SWMTKN-1-65mpdlvz77eed51uvgwb18rp1yt3d30m3wxrzz0gbc6uz7745q-1td5sp20mb9ft0kxh0j3ifra2 172.31.11.36:2377

//on DB-MASTER 
	//Check if the worker nodes are connected
	sudo docker node ls
	
	//create overlay network to attch backend & database
	sudo docker network create --driver=overlay --attachable mynetwork1
	
	sudo docker run  -dp 3306:3306 --name employeedb --network mynetwork1 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=employeedb mysql:5.7
	
// ON WORKERNODE -1 (spring app in src)
		//clone code 
			git clone https://github.com/laxapatiakshaylearning/ashlesh
		
		//add Dockerfile
		
	#stage1
        FROM  maven:3.6-alpine as builder

        COPY springboot-backend /springboot-backend

        WORKDIR /springboot-backend

        RUN mvn clean install -DskipTests
     #stage2
        FROM openjdk:8-alpine

        COPY --from=builder /springboot-backend/target/app.jar /app.jar

        EXPOSE 8080

        ENTRYPOINT ["java","-jar","app.jar"] 
		
	//COMMENT THE PORT HOST USER PASSWORD AS SHOWN BELOW
	
	sudo nano src/main/java/com/example/demo/SpringbootBackendApplication.java
	
	//edit file
		sudo nano src/main/java/com/example/demo/controller/EmployeeController.java
		
		@CrossOrigin(origins = "*")
	
	//Remove port & change databasename-employeedb 
		sudo nano src/main/resources/application.properties
		
    //build & run dockerfile in workernode-1
	sudo docker build -t employeeapp:v01 .
	
	
	 sudo docker network ls (mynetwork1)
	 sudo docker run -d --name employeeapp --network mynetwork1  -e host=employeedb -e mysql_user=root -e mysql_password=root employeeapp:v01
	
	 expected :   2e062f69b90057dc25d1a12460a2143070da6f9b6d4f5eb2171650e163875337

	// go to DB-MASTER run create another network
		sudo docker network create --driver=overlay --attachable mynetwork2
		sudo docker node ls
		expected : st9vc4t0phbm5y6kgk7zebtd7
		
	//CHECK IF THE CONTAINER LAUNCHED IS RUNNING
		sudo docker ps -a
		
		
	//ON BACKEND HOST ( HOST2 ) 
		sudo docker network connect mynetwork2 employeeapp
		
////////////////////now go to frontend workernode-2 /////////////////
		
		//clone repo 
			git clone https://github.com/laxapatiakshaylearning/ashlesh
			
		//go to app create default.conf file
		
		sudo nano default.conf
		
		server {
		listen 80;
		server_name localhost;
		#charset koi8-r;
		#access_log /var/log/nginx/host.access.log main;
		location / {
		root /usr/share/nginx/html;
		index index.html index.htm;
		}
		location /api {
		proxy_pass http://employeeapp:8080/api/v1/employees;
		}
		#error_page 404 /404.html;
		# redirect server error pages to the static page /50x.html
		error_page 500 502 503 504 /50x.html;
		location = /50x.html {
		root /usr/share/nginx/html;
		}
		}
		
//go to src/app/employee.service.ts file edit base url
	sudo nano src/app/employee.service.ts
	
	private baseURL="api";

//edit Dockerfile

FROM node:10-alpine as build-step
RUN mkdir -p /app1
WORKDIR /app1
COPY package.json /app1
RUN npm install
COPY . /app1
RUN npm run build --prod
# Stage 2
FROM nginx:1.17.1-alpine
COPY --from=build-step /app1/dist/app /usr/share/nginx/html
RUN rm -rf /etc/nginx/conf.d/default.conf
COPY default.conf /etc/nginx/conf.d/


	//BUILD THE IMAGE
	sudo docker build -t employeeweb:v01 .


	//RUN THE CONTAINER FROM IMAGE
	sudo docker run -d -it -p 80:80/tcp --name employeeweb --network mynetwork2 employeeweb:v01
	
	//CHECK IF THE CONTAINER IS RUNNING
	sudo docker ps -a 
	
	//to check container logs
		sudo docker logs containerID
		
//check front end node ip addres & hit -> this will start application .

///check backend ec2 ip and check it will show access denied	



	

	//tag & push image to docker hub
	
	sudo docker login
	 sudo docker tag <8cf625070931-imageid> akshaykamthe651/three-tierapp-mysqlspringappangular:mysqlv01
	 sudo docker push akshaykamthe651/three-tierapp-mysqlspringappangular:mysqlv01
	